import discord
from discord.ext import commands, tasks
from discord.ui import View, Button, Select, Modal, TextInput
import a2s
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SERVER_IP = "51.68.152.142"
SERVER_PORT = 17283

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
ALLOWED_USERS = [1412894066982781029, 995978380207980545, 1348372787714195648]

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
bot_messages = []


class UserIDModal(Modal):
    def __init__(self, action: str, roles: list):
        super().__init__(title=f"{action} —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        self.action = action
        self.roles = roles

        self.user_id_input = TextInput(
            label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            required=True,
            max_length=20
        )
        self.add_item(self.user_id_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_id = int(self.user_id_input.value)
            target_user = await interaction.guild.fetch_member(user_id)
        except (ValueError, discord.NotFound):
            await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.", ephemeral=True)
            return
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", ephemeral=True)
            return

        success_roles = []
        failed_roles = []

        for role in self.roles:
            try:
                if self.action == "add":
                    if role not in target_user.roles:
                        await target_user.add_roles(role)
                        success_roles.append(f"‚ûï {role.mention}")
                    else:
                        success_roles.append(f"‚úÖ {role.mention} (—É–∂–µ –µ—Å—Ç—å)")
                else:
                    if role in target_user.roles:
                        await target_user.remove_roles(role)
                        success_roles.append(f"‚ûñ {role.mention}")
                    else:
                        success_roles.append(f"‚úÖ {role.mention} (—É–∂–µ –Ω–µ—Ç)")
            except:
                failed_roles.append(role.mention)

        result_message = f"**–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {target_user.mention}:**\n"
        if success_roles:
            result_message += "\n".join(success_roles) + "\n"
        if failed_roles:
            result_message += f"‚ùå –û—à–∏–±–∫–∞ —Å —Ä–æ–ª—è–º–∏: {', '.join(failed_roles)}"

        await interaction.response.send_message(result_message, ephemeral=True)


class RoleSelect(Select):
    def __init__(self, roles, action="add", target="self"):
        self.action = action
        self.target = target  # "self" –∏–ª–∏ "other"

        options = []
        for role in roles:
            if action == "add":
                emoji = "‚ûï"
                desc = "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å"
            else:
                emoji = "‚ûñ"
                desc = "–£–±—Ä–∞—Ç—å —Ä–æ–ª—å"

            options.append(discord.SelectOption(
                label=role.name,
                value=str(role.id),
                description=desc,
                emoji=emoji
            ))

        placeholder = "–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏..." if target == "self" else "–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è..."
        super().__init__(
            placeholder=placeholder,
            min_values=1,
            max_values=len(options),
            options=options
        )

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id not in ALLOWED_USERS:
            await interaction.response.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", ephemeral=True)
            return

        selected_roles = []
        for role_id in self.values:
            role = interaction.guild.get_role(int(role_id))
            if role:
                selected_roles.append(role)

        if not selected_roles:
            await interaction.response.send_message("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏!", ephemeral=True)
            return

        if self.target == "self":
            # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–µ–±—è
            success_roles = []
            failed_roles = []

            for role in selected_roles:
                try:
                    if self.action == "add":
                        if role not in interaction.user.roles:
                            await interaction.user.add_roles(role)
                            success_roles.append(f"‚ûï {role.mention}")
                        else:
                            success_roles.append(f"‚úÖ {role.mention} (—É–∂–µ –µ—Å—Ç—å)")
                    else:
                        if role in interaction.user.roles:
                            await interaction.user.remove_roles(role)
                            success_roles.append(f"‚ûñ {role.mention}")
                        else:
                            success_roles.append(f"‚úÖ {role.mention} (—É–∂–µ –Ω–µ—Ç)")
                except:
                    failed_roles.append(role.mention)

            result_message = ""
            if success_roles:
                result_message += "\n".join(success_roles) + "\n"
            if failed_roles:
                result_message += f"‚ùå –û—à–∏–±–∫–∞: {', '.join(failed_roles)}"

            await interaction.response.send_message(result_message, ephemeral=True)
        else:
            # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal = UserIDModal(self.action, selected_roles)
            await interaction.response.send_modal(modal)


class AdminMenu(View):
    def __init__(self):
        super().__init__(timeout=300)

    async def check_access(self, interaction: discord.Interaction):
        if interaction.user.id not in ALLOWED_USERS:
            await interaction.response.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="–°–µ–±–µ: –í—ã–¥–∞—Ç—å", style=discord.ButtonStyle.green, emoji="‚ûï", row=0)
    async def give_self(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        bot_member = interaction.guild.me
        available_roles = []

        for role in interaction.guild.roles:
            if (role < bot_member.top_role and
                    role != interaction.guild.default_role and
                    not role.managed):
                available_roles.append(role)

        if not available_roles:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π!", ephemeral=True)
            return

        view = View()
        view.add_item(RoleSelect(available_roles, "add", "self"))
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ–±–µ:", view=view, ephemeral=True)

    @discord.ui.button(label="–°–µ–±–µ: –£–±—Ä–∞—Ç—å", style=discord.ButtonStyle.red, emoji="‚ûñ", row=0)
    async def remove_self(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        user_roles = []
        for role in interaction.user.roles:
            if (role != interaction.guild.default_role and
                    not role.managed and
                    role < interaction.guild.me.top_role):
                user_roles.append(role)

        if not user_roles:
            await interaction.response.send_message("‚úÖ –ù–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", ephemeral=True)
            return

        view = View()
        view.add_item(RoleSelect(user_roles, "remove", "self"))
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É —Å–µ–±—è:", view=view, ephemeral=True)

    @discord.ui.button(label="–î—Ä—É–≥–æ–º—É: –í—ã–¥–∞—Ç—å", style=discord.ButtonStyle.green, emoji="üë•", row=1)
    async def give_other(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        bot_member = interaction.guild.me
        available_roles = []

        for role in interaction.guild.roles:
            if (role < bot_member.top_role and
                    role != interaction.guild.default_role and
                    not role.managed):
                available_roles.append(role)

        if not available_roles:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π!", ephemeral=True)
            return

        view = View()
        view.add_item(RoleSelect(available_roles, "add", "other"))
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", view=view,
                                                ephemeral=True)

    @discord.ui.button(label="–î—Ä—É–≥–æ–º—É: –£–±—Ä–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üë•", row=1)
    async def remove_other(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        # –í—Å–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å
        bot_member = interaction.guild.me
        available_roles = []

        for role in interaction.guild.roles:
            if (role < bot_member.top_role and
                    role != interaction.guild.default_role and
                    not role.managed):
                available_roles.append(role)

        if not available_roles:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π!", ephemeral=True)
            return

        view = View()
        view.add_item(RoleSelect(available_roles, "remove", "other"))
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", view=view,
                                                ephemeral=True)

    @discord.ui.button(label="–£–±—Ä–∞—Ç—å –≤—Å–µ —É —Å–µ–±—è", style=discord.ButtonStyle.danger, emoji="üí£", row=2)
    async def remove_all_self(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        roles_to_remove = []
        for role in interaction.user.roles:
            if role != interaction.guild.default_role and not role.managed:
                roles_to_remove.append(role)

        if not roles_to_remove:
            await interaction.response.send_message("‚úÖ –ù–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", ephemeral=True)
            return

        try:
            await interaction.user.remove_roles(*roles_to_remove)
            await interaction.response.send_message(f"üí£ –í—Å–µ —Ä–æ–ª–∏ ({len(roles_to_remove)}) —É–¥–∞–ª–µ–Ω—ã!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @discord.ui.button(label="–ú–æ–∏ —Ä–æ–ª–∏", style=discord.ButtonStyle.blurple, emoji="üìã", row=2)
    async def my_roles(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        roles_info = []
        for role in interaction.user.roles:
            if role != interaction.guild.default_role:
                roles_info.append(role.mention)

        role_info = f"**–¢–≤–æ–∏ —Ä–æ–ª–∏:**\n{', '.join(roles_info) if roles_info else '–ù–µ—Ç —Ä–æ–ª–µ–π'}"
        await interaction.response.send_message(role_info, ephemeral=True)

    @discord.ui.button(label="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", style=discord.ButtonStyle.gray, emoji="üßπ", row=2)
    async def clear_chat(self, interaction: discord.Interaction, button: Button):
        if not await self.check_access(interaction):
            return

        deleted_count = 0
        for msg in bot_messages[:]:
            try:
                await msg.delete()
                deleted_count += 1
                bot_messages.remove(msg)
            except:
                pass

        await interaction.response.send_message(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π!", ephemeral=True, delete_after=3)


# –ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ SCP:SL —Å–µ—Ä–≤–µ—Ä–∞
@tasks.loop(seconds=10)
async def update_status():
    try:
        info = a2s.info((SERVER_IP, SERVER_PORT))
        status = f"SCP:SL {info.player_count}/{info.max_players}"
    except Exception:
        status = "SCP:SL —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    try:
        await bot.change_presence(activity=discord.Activity(
            type=discord.ActivityType.watching,
            name=status
        ))
    except:
        pass


@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    bot_messages.clear()
    update_status.start()


async def send_menu(ctx):
    embed = discord.Embed(
        title="üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ - SCP:SL",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –¥–ª—è —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        color=discord.Color.gold()
    )
    embed.add_field(name="‚ûï –°–µ–±–µ: –í—ã–¥–∞—Ç—å", value="–í—ã–¥–∞—Ç—å —Ä–æ–ª–∏ —Å–µ–±–µ", inline=True)
    embed.add_field(name="‚ûñ –°–µ–±–µ: –£–±—Ä–∞—Ç—å", value="–£–±—Ä–∞—Ç—å —Ä–æ–ª–∏ —É —Å–µ–±—è", inline=True)
    embed.add_field(name="üë• –î—Ä—É–≥–æ–º—É: –í—ã–¥–∞—Ç—å", value="–í—ã–¥–∞—Ç—å —Ä–æ–ª–∏ –¥—Ä—É–≥–æ–º—É", inline=True)
    embed.add_field(name="üë• –î—Ä—É–≥–æ–º—É: –£–±—Ä–∞—Ç—å", value="–£–±—Ä–∞—Ç—å —Ä–æ–ª–∏ —É –¥—Ä—É–≥–æ–≥–æ", inline=True)
    embed.add_field(name="üí£ –£–±—Ä–∞—Ç—å –≤—Å–µ", value="–°–Ω—è—Ç—å –≤—Å–µ —Ä–æ–ª–∏ —É —Å–µ–±—è", inline=True)
    embed.add_field(name="üìã –ú–æ–∏ —Ä–æ–ª–∏", value="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–æ–ª–∏", inline=True)
    embed.add_field(name="üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", value="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞", inline=True)
    embed.set_footer(text="–°—Ç–∞—Ç—É—Å SCP:SL —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")

    msg = await ctx.send(embed=embed, view=AdminMenu())
    bot_messages.append(msg)
    return msg


@bot.command()
async def menu(ctx):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if ctx.author.id not in ALLOWED_USERS:
        try:
            await ctx.message.delete()
        except:
            pass
        return

    await send_menu(ctx)
    try:
        await ctx.message.delete()
    except:
        pass


@bot.command()
async def clear(ctx):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    if ctx.author.id not in ALLOWED_USERS:
        try:
            await ctx.message.delete()
        except:
            pass
        return

    deleted_count = 0
    for msg in bot_messages[:]:
        try:
            await msg.delete()
            deleted_count += 1
            bot_messages.remove(msg)
        except:
            pass

    temp_msg = await ctx.send(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π!", delete_after=3)
    bot_messages.append(temp_msg)

    try:
        await ctx.message.delete()
    except:
        pass


@bot.command()
async def status(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SCP:SL —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        info = a2s.info((SERVER_IP, SERVER_PORT))
        players = a2s.players((SERVER_IP, SERVER_PORT))

        embed = discord.Embed(
            title="üü¢ SCP:SL –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞",
            description=f"**{info.server_name}**",
            color=discord.Color.green()
        )
        embed.add_field(name="–ò–≥—Ä–æ–∫–∏", value=f"{info.player_count}/{info.max_players}")
        embed.add_field(name="–ö–∞—Ä—Ç–∞", value=info.map_name)
        embed.add_field(name="–ü–∏–Ω–≥", value=f"{info.ping * 1000:.0f}ms")

        if players:
            player_list = [f"{player.name}" for player in players[:10]]
            embed.add_field(name="–û–Ω–ª–∞–π–Ω", value="\n".join(player_list) + ("\n..." if len(players) > 10 else ""),
                            inline=False)

        msg = await ctx.send(embed=embed, delete_after=20)
    except Exception as e:
        msg = await ctx.send(f"üî¥ SCP:SL –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}", delete_after=10)

    bot_messages.append(msg)
    try:
        await ctx.message.delete()
    except:
        pass


@bot.event
async def on_message(message):
    if message.author == bot.user:
        bot_messages.append(message)

    if message.author.bot:
        return

    if message.content.startswith('!') and message.author.id not in ALLOWED_USERS:
        try:
            await message.delete()
        except:
            pass
        return

    await bot.process_commands(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)
